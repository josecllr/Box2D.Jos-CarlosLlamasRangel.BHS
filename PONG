//Declaración de variables 
int posicionBarraJugador = 100;
int largoDeVentana = 0;
int altoDeVentana = 0;
int anchoDeBarra = 10;
int largoDeBarra = 40;
int posicionBarraCPU = 100;
boolean presionandoArriba = false; 
boolean presionandoAbajo = false;
float posicionXPelota= 0;
float posicionYPelota= 0;
int tamanoPelota = 10;
//_______________________________________________


float anguloA = random(5/8*(3.1416), -(5/8*(3.1416)));
//for (int anguloA = 0; anguloA < 100; i++) {
// float anguloA = random(5/8*(3.1416), -(5/8*(3.1416)));
 // println(anguloA);
//}

int rad = 5;        // Width of the shape
float xpos, ypos;    // Starting position of shape   


float xspeed = 2.8;  // Speed of the shape
float yspeed = 2.5;  // Speed of the shape

float xdirection = 1;  // Left or Right
float ydirection = 1;  // Top to Bottom


float grosorlinea = random (8);

int puntos = 0;
int puntosCPU = 0;

//color de fondo
float fondocolor = random (255);


float moverlineay1 = 0;
float moverlineay2 = 0;

float moverlineax1 = 0;
float moverlineax2 = 0;


int yjugad = 0;
int yoponente = 0;

boolean mensaje = false;
boolean bDisplayMessage; 
int startTime;
final int DISPLAY_DURATION = 9000;


//_______________________________________________

void setup(){
size(500,300);
largoDeVentana = width;
altoDeVentana = height;
posicionXPelota = largoDeVentana/2;
posicionYPelota =  altoDeVentana/2;

//_______________________________________________

noStroke();
  frameRate(30);
  ellipseMode(RADIUS);
  // Set the starting position of the shape
  xpos = width/2;
  ypos = height/2;
//_______________________________________________
  
  
  

}

void draw(){
  //verifica si el usario está presionando las teclas de control
  verificarBotones();
  //verifica que la barra no se salga del canvas
  verificarLimitesDeBarra();
  //color de fondo
  background(xpos,ypos,xpos/ypos);
  fill(ypos,xpos,xpos*ypos);
  noStroke();
  rect(20,posicionBarraJugador,anchoDeBarra,largoDeBarra);
  rect(largoDeVentana-20-anchoDeBarra, posicionBarraCPU, anchoDeBarra,largoDeBarra);
  
  rect(225,100,10,(-xpos/15));
  rect(275,100,10,(-xpos/15));
  rect(225,125,60,5+(xpos/15));
  //rect(275,100,10,10);
  //rect(275,100,10,10);
  //=========================================
  stroke (0,0,255);
  line (0,moverlineay1,500,moverlineay2);
  moverlineay1+=5;
  moverlineay2+=5;
  if (moverlineay1 >= 300){
    moverlineay1 =0;
    moverlineay2=0;
  }
  //=========================================
  stroke (255,0,0);
  line (moverlineax1,0,moverlineax2,500);
  moverlineax1+=8.333333333333334;
  moverlineax2+=8.333333333333334;
  if (moverlineax1 >=500){
    moverlineax1 =0;
    moverlineax2=0;
  }
 //ellipse (xpos,ypos,10,10);
  
  
  
  
  
  
  
  
  
  
  textSize(10);
  text(puntos, 10, 30); 
  fill(0, 102, 153);
  textSize(10);
  text(puntosCPU, 490, 30); 
  fill(0, 102, 153);
  
//_______________________________________________
  
  // Update the position of the shape
  xpos = xpos + ( xspeed * xdirection );
  ypos = ypos + ( yspeed * ydirection );
  // Test to see if the shape exceeds the boundaries of the screen
  // If it does, reverse its direction by multiplying by -1
  if (xpos > width-rad || xpos < rad) {
    xdirection *= -1;
  }
  if (ypos > height-rad || ypos < rad) {
    ydirection *= -1;
  }
  
  
yjugad =  posicionBarraJugador + largoDeBarra;

yoponente = posicionBarraCPU + largoDeBarra;
  
  
  
  
  // Update the position of the shape
  xpos = xpos + ( xspeed * xdirection );
  ypos = ypos + ( yspeed * ydirection );
  // Test to see if the shape exceeds the boundaries of the screen
  // If it does, reverse its direction by multiplying by -1
  if (xpos > width-rad || xpos < rad) {
    xdirection *= -1;
  }
  if (ypos > posicionBarraJugador && ypos < yjugad && xpos <= 30) {
    xdirection *= -1;
  }
  if (ypos > posicionBarraCPU && ypos < yoponente && xpos >= 470) {
    xdirection *= -1;
  }
  
  
  
  
  if (ypos > posicionBarraCPU && xdirection >= 1) {
    posicionBarraCPU += 9;
  }
  
  
  if (ypos < posicionBarraCPU && xdirection >= 1) {
    posicionBarraCPU += -9;
  }

//puntaje
if (xpos > width-rad) {
    puntos += 1;
     xpos = width/2;
  ypos = height/2;
  }
   
if (xpos < rad) {
  puntosCPU += 1;
     xpos = width/2;
  ypos = height/2;
  mensaje = true; 
  textSize(10);
  text("puntos", 250,150);
  fill(0, 102, 153);
  bDisplayMessage= true;
  }
  
if ( mensaje = true ) {
  textSize(10);
  text(puntos, 10, 30); 
  fill(0, 102, 153);
}
   
if (bDisplayMessage)
  {
    fill(#FFAA88);
    text("LOOSER!!!", 235, height / 2);
    // If the spent time is above the defined duration
    if (millis() - startTime > DISPLAY_DURATION)
    {
      // Stop displaying the message, thus resume the ball moving
      bDisplayMessage = false;
      startTime = millis();
    }
  }
   
   
   
//textos de dialogo;
//if (puntosCP) {
//textSize(10);
  //text("HOLA", 200, 150); 
  //fill(0,0,0);
//}
  
  
  
  
  
  
  
  

  // Draw the shape
  ellipse(xpos, ypos, rad, rad);
//_______________________________________________

}

void keyPressed(){
  //si estoy presionando la tecla w, presionandoArriba = true;
  if(key == 'w' || key == 'W' ){
    presionandoArriba = true;
  }
  if(key == 's' || key == 'S' ){
    presionandoAbajo = true;
  }  
}

void keyReleased() {
  if(key == 'w' || key == 'W' ){
    presionandoArriba = false;
  }
  if(key == 's' || key == 'S' ){
    presionandoAbajo = false;
  }
}

void verificarBotones(){
  if (presionandoArriba == true){
    posicionBarraJugador -=5;
  }  
  if (presionandoAbajo == true){
    posicionBarraJugador +=5;
  }
}

void verificarLimitesDeBarra(){
  if(posicionBarraJugador <= 0){
    posicionBarraJugador = 0;
  }
  if(posicionBarraJugador >= (altoDeVentana - largoDeBarra)){
    posicionBarraJugador = (altoDeVentana - largoDeBarra);
  }
}


//====================================================================
void verificarLimitesDeBarraCPU(){
  if(posicionBarraCPU <= 0){
    posicionBarraCPU = 0;
  }
  if(posicionBarraCPU >= (altoDeVentana - largoDeBarra)){
    posicionBarraCPU = (altoDeVentana - largoDeBarra);
  }
}
